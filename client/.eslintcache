[{"C:\\Users\\karti\\Downloads\\decoder-master\\client\\src\\index.js":"1","C:\\Users\\karti\\Downloads\\decoder-master\\client\\src\\App.js":"2","C:\\Users\\karti\\Downloads\\decoder-master\\client\\src\\Navbar.js":"3","C:\\Users\\karti\\Downloads\\decoder-master\\client\\src\\screens\\Signin.js":"4","C:\\Users\\karti\\Downloads\\decoder-master\\client\\src\\screens\\Home.js":"5","C:\\Users\\karti\\Downloads\\decoder-master\\client\\src\\screens\\CreatePost.js":"6","C:\\Users\\karti\\Downloads\\decoder-master\\client\\src\\screens\\Signup.js":"7","C:\\Users\\karti\\Downloads\\decoder-master\\client\\src\\screens\\ForkedPost.js":"8","C:\\Users\\karti\\Downloads\\decoder-master\\client\\src\\screens\\category\\CategoryA.js":"9","C:\\Users\\karti\\Downloads\\decoder-master\\client\\src\\screens\\category\\CategoryC.js":"10","C:\\Users\\karti\\Downloads\\decoder-master\\client\\src\\screens\\category\\CategoryB.js":"11"},{"size":506,"mtime":1607067126000,"results":"12","hashOfConfig":"13"},{"size":1119,"mtime":1607176262866,"results":"14","hashOfConfig":"13"},{"size":2321,"mtime":1607192949456,"results":"15","hashOfConfig":"13"},{"size":2466,"mtime":1607067126000,"results":"16","hashOfConfig":"13"},{"size":7121,"mtime":1607067126000,"results":"17","hashOfConfig":"13"},{"size":3018,"mtime":1607177512130,"results":"18","hashOfConfig":"13"},{"size":2708,"mtime":1607067126000,"results":"19","hashOfConfig":"13"},{"size":2498,"mtime":1607067126000,"results":"20","hashOfConfig":"13"},{"size":6880,"mtime":1607067126000,"results":"21","hashOfConfig":"13"},{"size":6880,"mtime":1607067126000,"results":"22","hashOfConfig":"13"},{"size":6880,"mtime":1607067126000,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"52nw09",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"26"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"26"},"C:\\Users\\karti\\Downloads\\decoder-master\\client\\src\\index.js",[],["52","53"],"C:\\Users\\karti\\Downloads\\decoder-master\\client\\src\\App.js",[],"C:\\Users\\karti\\Downloads\\decoder-master\\client\\src\\Navbar.js",["54","55","56","57","58"],"C:\\Users\\karti\\Downloads\\decoder-master\\client\\src\\screens\\Signin.js",[],"C:\\Users\\karti\\Downloads\\decoder-master\\client\\src\\screens\\Home.js",[],"C:\\Users\\karti\\Downloads\\decoder-master\\client\\src\\screens\\CreatePost.js",["59"],"// import { useState } from \"react\";\nimport React , {useState} from 'react';\nimport M from 'materialize-css';\n\nfunction CreatePost()\n{\n    const [title,setTitle]=useState(\"\");\n    const [body,setBody]=useState(\"\");\n    const [pic,setPic]=useState(\"\")\n    const [category,setCategory]=useState(\"\");\n\n    function PostData()\n    {\n        fetch('/createpost',{\n            method:\"post\",\n            headers:{\n                \"Content-Type\":\"application/json\",\n                \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\")\n            },\n            body:JSON.stringify({\n                title,\n                body,\n                pic,\n                category,\n            })\n        })\n        .then(res=>res.json())\n        .then((data)=>{\n            console.log(data);\n        })\n    }\n\n    return(\n        <div>\n            <div className=\"mycard\" style={{textAlign:\"center\"}}>\n                <div className=\"card auth-card\">\n                    <input\n                    type=\"text\"\n                    value={title}\n                    placeholder=\"Title\"\n                    onChange={\n                        function(event)\n                        {\n                            setTitle(event.target.value);\n                        }\n                    }\n                    />\n                </div>\n\n                <div className=\"card auth-card\">\n                    <input\n                    type=\"text\"\n                    value={body}\n                    placeholder=\"Body\"\n                    onChange={\n                        function(event)\n                        {\n                            setBody(event.target.value);\n                        }\n                    }\n                    />\n                </div>\n                <div className=\"card auth-card\">\n                    <input\n                    type=\"file\"\n                    value={pic}\n                    placeholder=\"Picture\"\n                    onChange={\n                        function(event)\n                        {\n                            console.log(event.target.value)\n                            // setPic(event.target.files);\n                            setPic(event.target.value);\n                        }\n                    }\n                    />\n                </div>\n                <div className=\"card auth-card\">\n                    {/* need to put dropdown list here */}\n                    <input \n                    type=\"text\"\n                    value={category}\n                    placeholder=\"category\"\n                    onChange={(event)=>{\n                        console.log(event.target.value)\n                        setCategory(event.target.value)\n                    }}\n                    />\n                </div>\n            </div>\n\n            <button \n            className=\"btn\"\n            onClick={()=>{\n                PostData();\n            }}\n            >\n                Post\n            </button>\n        </div>\n    )\n}\n\nexport default CreatePost;","C:\\Users\\karti\\Downloads\\decoder-master\\client\\src\\screens\\Signup.js",[],"C:\\Users\\karti\\Downloads\\decoder-master\\client\\src\\screens\\ForkedPost.js",["60"],"import react, { useEffect, useState } from 'react';\n\nfunction ForkedPost()\n{\n    const [myforks,setMyforks]=useState([]);\n\n    useEffect(()=>{\n        fetch('/getforkpost',{\n            method:\"get\",\n            headers:{\n                \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\")\n            }\n        })\n        .then(res=>res.json())\n        .then((data)=>{\n            // console.log(data);\n            setMyforks(data)\n        })\n        .catch((err)=>{\n            console.log(err)\n        })\n    },[])\n\n    function UnforkPost(postId)\n    {\n        fetch('/unforkpost',{\n            method:\"put\",\n            headers:{\n                \"Content-Type\":\"application/json\",\n                \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\")\n            },\n            body:JSON.stringify({\n                postId,\n            })\n        })\n        .then(res=>res.json())\n        .then((data)=>{\n            console.log(data)\n            console.log(\"unforked successfully\")\n        })\n        .catch((err)=>{\n            console.log(err);\n        })\n    }\n\n    return(\n        <div>\n            {\n                myforks.map(item=>{\n                    return(\n                        <div className=\"card\">\n                            <h1>{item.title}</h1>\n                            <h2>{item.body}</h2>\n                            <h5>{item.likes.length} likes</h5>\n\n                            <button \n                            className=\"btn\"\n                            onClick={()=>{\n                                UnforkPost(item._id)\n                            }}>\n                                Unfork\n                            </button>\n\n                            <div>\n                                {\n                                    item.comments.map(userComment=>{\n                                        // console.log(userComment)\n                                        return(\n                                            <h6>\n                                                <span style={{fontWeight:\"600\"}}>{userComment.commentedBy.name}</span> {userComment.commentBody}\n                                            </h6>   \n                                        )\n                                    })\n                                }\n                            </div>\n                        </div>\n                    )\n                })\n            }\n            <h1>Forked page</h1>\n        </div>\n    )\n}\n\nexport default ForkedPost;","C:\\Users\\karti\\Downloads\\decoder-master\\client\\src\\screens\\category\\CategoryA.js",["61"],"import react, { useEffect, useState } from 'react';\n\nfunction CategoryA()\n{\n    const [allThePosts,setAllThePosts]=useState([]);\n    const categoryName=\"A\";\n\n    useEffect(()=>{\n        fetch(`/allposts/${categoryName}`,{\n            method:\"get\",\n            headers:{\n                \"Authorization\" : \"Bearer \" + localStorage.getItem(\"jwt\") \n            }\n        })\n        .then(res=>res.json())\n        .then((data)=>{\n            console.log(data)\n            setAllThePosts(data)\n        })\n        .catch((err)=>{\n            console.log(err)\n        })\n    },[])\n\n    function LikePost(postId)\n    {\n        fetch('/likepost',{\n            method:\"put\",\n            headers:{\n                \"Content-Type\":\"application/json\",\n                \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\") \n            },\n            body:JSON.stringify({\n                postId,\n            })\n        })\n        .then(res=>res.json())\n        .then((data)=>{\n            console.log(data);\n            const newData=allThePosts.map(item=>{\n                if(item._id === data._id)\n                    return data;\n                else   \n                    return item;\n            })\n\n            setAllThePosts(newData);\n            // flag+=1;\n        })\n        .catch((err)=>{\n            console.log(err);\n        })\n    }\n\n    function UnlikePost(postId)\n    {\n        fetch('/unlikepost',{\n            method:\"put\",\n            headers:{\n                \"Content-Type\":\"application/json\",\n                \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\")\n            },\n            body:JSON.stringify({\n                postId,\n            })\n        })\n        .then(res=>res.json())\n        .then((data)=>{\n            console.log(data);\n            // flag+=1;\n        })\n        .catch((err)=>{\n            console.log(err);\n        })\n    }\n\n    function DeletePost(postId)\n    {\n        fetch(`/delete/${postId}`,{\n            method:\"delete\",\n            headers:{\n                \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\")\n            }\n        })\n        .then(res=>res.json())\n        .then((data)=>{\n            console.log(data)\n            const newData=allThePosts.map(item=>{\n                    if(item._id !== data._id)\n                        return item\n                    return data\n            })\n            setAllThePosts(newData);\n            // flag+=1;\n        })\n        .catch((err)=>{\n            console.log(err);\n        })\n    }\n\n    function makeComment(comment,postId)\n    {\n        fetch('/comment',{\n            method:\"put\",\n            headers:{\n                \"Content-Type\":\"application/json\",\n                \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\")\n            },\n            body:JSON.stringify({\n                commentBody:comment,\n                postId,\n            })\n        })\n        .then(res=>res.json())\n        .then((data)=>{\n            // console.log(data);\n            const newData=allThePosts.map(item=>{\n                if(item._id === data._id)\n                    return data\n                else    \n                    return item\n            })\n            setAllThePosts(newData)\n        })\n        .catch((err)=>{\n            console.log(err)\n        })\n    }\n\n    function ForkPost(postId)\n    {\n        fetch('/forkpost',{\n            method:\"put\",\n            headers:{\n                \"Content-Type\":\"application/json\",\n                \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\")\n            },\n            body:JSON.stringify({\n                postId,\n            })\n        })\n        .then(res=>res.json())\n        .then(data=>{\n            console.log(data)\n        })\n    }\n\n    return(\n        <div>\n            <h1>this is Category A</h1>\n            {\n                allThePosts.map(item=>{\n                    // console.log(\"alltheposts\");\n                    // console.log(item)\n                    return(\n                        // <li><h2>{item.title}</h2></li>\n                        // <li><h2>{item.body}</h2></li>\n                        <div className=\"card\">\n                            <h2>{item.title}</h2>\n                            <h2>{item.body}</h2>\n                            <h4>{item.likes.length} likes</h4>\n\n                            <button \n                            className=\"btn\"\n                            onClick={()=>{\n                                LikePost(item._id)\n                            }}\n                            >Like</button>\n\n                            <button \n                            className=\"btn\"\n                            onClick={()=>{\n                                UnlikePost(item._id)\n                            }}\n                            >Unlike</button>\n                            \n                            <button \n                            className=\"btn\"\n                            onClick={()=>{\n                                DeletePost(item._id)\n                            }}\n                            >Delete</button>\n                            \n                            <button \n                            className=\"btn\"\n                            onClick={()=>{\n                                ForkPost(item._id)\n                            }}\n                            >Fork</button>\n\n                            <h4>Previous Comments</h4>\n                            <div>\n                                {\n                                    item.comments.map(userComment=>{\n                                        // console.log(userComment)\n                                        return(\n                                            <h6>\n                                                <span style={{fontWeight:\"600\"}}>{userComment.commentedBy.name}</span> {userComment.commentBody}\n                                            </h6>   \n                                        )\n                                    })\n                                }\n                            </div>\n\n                            <div>\n                                <form onSubmit={(e)=>{\n                                    makeComment(e.target[0].value , item._id);\n                                    e.preventDefault();     //when we submit forms, the page automatically gets reloaded\n                                }}>                         \n                                    <input                  //to prevent that reloading, we have used e.preventDefault()\n                                    type=\"text\"\n                                    placeholder=\"comments\"\n                                    />\n                                </form>\n                            </div>\n\n                        </div>\n                    )\n                })\n            }\n        </div>\n    )\n}\n\nexport default CategoryA;","C:\\Users\\karti\\Downloads\\decoder-master\\client\\src\\screens\\category\\CategoryC.js",["62"],"import react, { useEffect, useState } from 'react';\n\nfunction CategoryC()\n{\n    const [allThePosts,setAllThePosts]=useState([]);\n    const categoryName=\"C\";\n\n    useEffect(()=>{\n        fetch(`/allposts/${categoryName}`,{\n            method:\"get\",\n            headers:{\n                \"Authorization\" : \"Bearer \" + localStorage.getItem(\"jwt\") \n            }\n        })\n        .then(res=>res.json())\n        .then((data)=>{\n            console.log(data)\n            setAllThePosts(data)\n        })\n        .catch((err)=>{\n            console.log(err)\n        })\n    },[])\n\n    function LikePost(postId)\n    {\n        fetch('/likepost',{\n            method:\"put\",\n            headers:{\n                \"Content-Type\":\"application/json\",\n                \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\") \n            },\n            body:JSON.stringify({\n                postId,\n            })\n        })\n        .then(res=>res.json())\n        .then((data)=>{\n            console.log(data);\n            const newData=allThePosts.map(item=>{\n                if(item._id === data._id)\n                    return data;\n                else   \n                    return item;\n            })\n\n            setAllThePosts(newData);\n            // flag+=1;\n        })\n        .catch((err)=>{\n            console.log(err);\n        })\n    }\n\n    function UnlikePost(postId)\n    {\n        fetch('/unlikepost',{\n            method:\"put\",\n            headers:{\n                \"Content-Type\":\"application/json\",\n                \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\")\n            },\n            body:JSON.stringify({\n                postId,\n            })\n        })\n        .then(res=>res.json())\n        .then((data)=>{\n            console.log(data);\n            // flag+=1;\n        })\n        .catch((err)=>{\n            console.log(err);\n        })\n    }\n\n    function DeletePost(postId)\n    {\n        fetch(`/delete/${postId}`,{\n            method:\"delete\",\n            headers:{\n                \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\")\n            }\n        })\n        .then(res=>res.json())\n        .then((data)=>{\n            console.log(data)\n            const newData=allThePosts.map(item=>{\n                    if(item._id !== data._id)\n                        return item\n                    return data\n            })\n            setAllThePosts(newData);\n            // flag+=1;\n        })\n        .catch((err)=>{\n            console.log(err);\n        })\n    }\n\n    function makeComment(comment,postId)\n    {\n        fetch('/comment',{\n            method:\"put\",\n            headers:{\n                \"Content-Type\":\"application/json\",\n                \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\")\n            },\n            body:JSON.stringify({\n                commentBody:comment,\n                postId,\n            })\n        })\n        .then(res=>res.json())\n        .then((data)=>{\n            // console.log(data);\n            const newData=allThePosts.map(item=>{\n                if(item._id === data._id)\n                    return data\n                else    \n                    return item\n            })\n            setAllThePosts(newData)\n        })\n        .catch((err)=>{\n            console.log(err)\n        })\n    }\n\n    function ForkPost(postId)\n    {\n        fetch('/forkpost',{\n            method:\"put\",\n            headers:{\n                \"Content-Type\":\"application/json\",\n                \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\")\n            },\n            body:JSON.stringify({\n                postId,\n            })\n        })\n        .then(res=>res.json())\n        .then(data=>{\n            console.log(data)\n        })\n    }\n\n    return(\n        <div>\n            <h1>this is Category C</h1>\n            {\n                allThePosts.map(item=>{\n                    // console.log(\"alltheposts\");\n                    // console.log(item)\n                    return(\n                        // <li><h2>{item.title}</h2></li>\n                        // <li><h2>{item.body}</h2></li>\n                        <div className=\"card\">\n                            <h2>{item.title}</h2>\n                            <h2>{item.body}</h2>\n                            <h4>{item.likes.length} likes</h4>\n\n                            <button \n                            className=\"btn\"\n                            onClick={()=>{\n                                LikePost(item._id)\n                            }}\n                            >Like</button>\n\n                            <button \n                            className=\"btn\"\n                            onClick={()=>{\n                                UnlikePost(item._id)\n                            }}\n                            >Unlike</button>\n                            \n                            <button \n                            className=\"btn\"\n                            onClick={()=>{\n                                DeletePost(item._id)\n                            }}\n                            >Delete</button>\n                            \n                            <button \n                            className=\"btn\"\n                            onClick={()=>{\n                                ForkPost(item._id)\n                            }}\n                            >Fork</button>\n\n                            <h4>Previous Comments</h4>\n                            <div>\n                                {\n                                    item.comments.map(userComment=>{\n                                        // console.log(userComment)\n                                        return(\n                                            <h6>\n                                                <span style={{fontWeight:\"600\"}}>{userComment.commentedBy.name}</span> {userComment.commentBody}\n                                            </h6>   \n                                        )\n                                    })\n                                }\n                            </div>\n\n                            <div>\n                                <form onSubmit={(e)=>{\n                                    makeComment(e.target[0].value , item._id);\n                                    e.preventDefault();     //when we submit forms, the page automatically gets reloaded\n                                }}>                         \n                                    <input                  //to prevent that reloading, we have used e.preventDefault()\n                                    type=\"text\"\n                                    placeholder=\"comments\"\n                                    />\n                                </form>\n                            </div>\n\n                        </div>\n                    )\n                })\n            }\n        </div>\n    )\n}\n\nexport default CategoryC;","C:\\Users\\karti\\Downloads\\decoder-master\\client\\src\\screens\\category\\CategoryB.js",["63"],"import react, { useEffect, useState } from 'react';\n\nfunction CategoryB()\n{\n    const [allThePosts,setAllThePosts]=useState([]);\n    const categoryName=\"B\";\n\n    useEffect(()=>{\n        fetch(`/allposts/${categoryName}`,{\n            method:\"get\",\n            headers:{\n                \"Authorization\" : \"Bearer \" + localStorage.getItem(\"jwt\") \n            }\n        })\n        .then(res=>res.json())\n        .then((data)=>{\n            console.log(data)\n            setAllThePosts(data)\n        })\n        .catch((err)=>{\n            console.log(err)\n        })\n    },[])\n\n    function LikePost(postId)\n    {\n        fetch('/likepost',{\n            method:\"put\",\n            headers:{\n                \"Content-Type\":\"application/json\",\n                \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\") \n            },\n            body:JSON.stringify({\n                postId,\n            })\n        })\n        .then(res=>res.json())\n        .then((data)=>{\n            console.log(data);\n            const newData=allThePosts.map(item=>{\n                if(item._id === data._id)\n                    return data;\n                else   \n                    return item;\n            })\n\n            setAllThePosts(newData);\n            // flag+=1;\n        })\n        .catch((err)=>{\n            console.log(err);\n        })\n    }\n\n    function UnlikePost(postId)\n    {\n        fetch('/unlikepost',{\n            method:\"put\",\n            headers:{\n                \"Content-Type\":\"application/json\",\n                \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\")\n            },\n            body:JSON.stringify({\n                postId,\n            })\n        })\n        .then(res=>res.json())\n        .then((data)=>{\n            console.log(data);\n            // flag+=1;\n        })\n        .catch((err)=>{\n            console.log(err);\n        })\n    }\n\n    function DeletePost(postId)\n    {\n        fetch(`/delete/${postId}`,{\n            method:\"delete\",\n            headers:{\n                \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\")\n            }\n        })\n        .then(res=>res.json())\n        .then((data)=>{\n            console.log(data)\n            const newData=allThePosts.map(item=>{\n                    if(item._id !== data._id)\n                        return item\n                    return data\n            })\n            setAllThePosts(newData);\n            // flag+=1;\n        })\n        .catch((err)=>{\n            console.log(err);\n        })\n    }\n\n    function makeComment(comment,postId)\n    {\n        fetch('/comment',{\n            method:\"put\",\n            headers:{\n                \"Content-Type\":\"application/json\",\n                \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\")\n            },\n            body:JSON.stringify({\n                commentBody:comment,\n                postId,\n            })\n        })\n        .then(res=>res.json())\n        .then((data)=>{\n            // console.log(data);\n            const newData=allThePosts.map(item=>{\n                if(item._id === data._id)\n                    return data\n                else    \n                    return item\n            })\n            setAllThePosts(newData)\n        })\n        .catch((err)=>{\n            console.log(err)\n        })\n    }\n\n    function ForkPost(postId)\n    {\n        fetch('/forkpost',{\n            method:\"put\",\n            headers:{\n                \"Content-Type\":\"application/json\",\n                \"Authorization\":\"Bearer \" + localStorage.getItem(\"jwt\")\n            },\n            body:JSON.stringify({\n                postId,\n            })\n        })\n        .then(res=>res.json())\n        .then(data=>{\n            console.log(data)\n        })\n    }\n\n    return(\n        <div>\n            <h1>this is Category B</h1>\n            {\n                allThePosts.map(item=>{\n                    // console.log(\"alltheposts\");\n                    // console.log(item)\n                    return(\n                        // <li><h2>{item.title}</h2></li>\n                        // <li><h2>{item.body}</h2></li>\n                        <div className=\"card\">\n                            <h2>{item.title}</h2>\n                            <h2>{item.body}</h2>\n                            <h4>{item.likes.length} likes</h4>\n\n                            <button \n                            className=\"btn\"\n                            onClick={()=>{\n                                LikePost(item._id)\n                            }}\n                            >Like</button>\n\n                            <button \n                            className=\"btn\"\n                            onClick={()=>{\n                                UnlikePost(item._id)\n                            }}\n                            >Unlike</button>\n                            \n                            <button \n                            className=\"btn\"\n                            onClick={()=>{\n                                DeletePost(item._id)\n                            }}\n                            >Delete</button>\n                            \n                            <button \n                            className=\"btn\"\n                            onClick={()=>{\n                                ForkPost(item._id)\n                            }}\n                            >Fork</button>\n\n                            <h4>Previous Comments</h4>\n                            <div>\n                                {\n                                    item.comments.map(userComment=>{\n                                        // console.log(userComment)\n                                        return(\n                                            <h6>\n                                                <span style={{fontWeight:\"600\"}}>{userComment.commentedBy.name}</span> {userComment.commentBody}\n                                            </h6>   \n                                        )\n                                    })\n                                }\n                            </div>\n\n                            <div>\n                                <form onSubmit={(e)=>{\n                                    makeComment(e.target[0].value , item._id);\n                                    e.preventDefault();     //when we submit forms, the page automatically gets reloaded\n                                }}>                         \n                                    <input                  //to prevent that reloading, we have used e.preventDefault()\n                                    type=\"text\"\n                                    placeholder=\"comments\"\n                                    />\n                                </form>\n                            </div>\n\n                        </div>\n                    )\n                })\n            }\n        </div>\n    )\n}\n\nexport default CategoryB;",{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","severity":1,"message":"69","line":1,"column":15,"nodeType":"70","messageId":"71","endLine":1,"endColumn":24},{"ruleId":"72","severity":1,"message":"73","line":11,"column":42,"nodeType":"74","endLine":11,"endColumn":162},{"ruleId":"72","severity":1,"message":"73","line":18,"column":60,"nodeType":"74","endLine":18,"endColumn":93},{"ruleId":"72","severity":1,"message":"73","line":19,"column":60,"nodeType":"74","endLine":19,"endColumn":93},{"ruleId":"75","severity":1,"message":"76","line":21,"column":60,"nodeType":"77","endLine":21,"endColumn":80},{"ruleId":"68","severity":1,"message":"78","line":3,"column":8,"nodeType":"70","messageId":"71","endLine":3,"endColumn":9},{"ruleId":"68","severity":1,"message":"79","line":1,"column":8,"nodeType":"70","messageId":"71","endLine":1,"endColumn":13},{"ruleId":"68","severity":1,"message":"79","line":1,"column":8,"nodeType":"70","messageId":"71","endLine":1,"endColumn":13},{"ruleId":"68","severity":1,"message":"79","line":1,"column":8,"nodeType":"70","messageId":"71","endLine":1,"endColumn":13},{"ruleId":"68","severity":1,"message":"79","line":1,"column":8,"nodeType":"70","messageId":"71","endLine":1,"endColumn":13},"no-native-reassign",["80"],"no-negated-in-lhs",["81"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'M' is defined but never used.","'react' is defined but never used.","no-global-assign","no-unsafe-negation"]